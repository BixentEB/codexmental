import SunCalc from 'https://esm.sh/suncalc';

/**
 * ========================================================
 * Codex Mental â€“ astro-lunaire.js
 * ========================================================
 *
 * ðŸ§­ CONTEXTE
 * Script qui gÃ©nÃ¨re les informations lunaires en temps rÃ©el.
 * 
 * âœ¨ FONCTIONNALITÃ‰S
 * - DÃ©termine la phase et l'illumination de la Lune.
 * - Affiche si elle est visible ou non.
 * - Calcule les prochains horaires de lever et coucher.
 * - Indique si la pleine lune est croissante ou dÃ©croissante.
 *
 * ðŸ”§ CONTRAINTES
 * - Utiliser SunCalc avec le fuseau horaire local.
 * - Afficher des dates lisibles (ex: ven. 12 juillet â€“ 23:08).
 *
 * ðŸ›  DERNIÃˆRE MISE Ã€ JOUR
 * - Ajout de la distinction Pleine lune croissante/dÃ©croissante.
 * - Tri des Ã©vÃ©nements futurs pour plus de prÃ©cision.
 */

export function getFullMoonInfo() {
  // 1. Configuration
  const PARIS_COORDS = { lat: 48.8566, lng: 2.3522 };
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  // 2. RÃ©cupÃ©ration des donnÃ©es
  const moonData = SunCalc.getMoonIllumination(now);
  const todayTimes = SunCalc.getMoonTimes(today, PARIS_COORDS.lat, PARIS_COORDS.lng);
  const tomorrowTimes = SunCalc.getMoonTimes(tomorrow, PARIS_COORDS.lat, PARIS_COORDS.lng);
  const moonPos = SunCalc.getMoonPosition(now, PARIS_COORDS.lat, PARIS_COORDS.lng);

  // 3. Correction prÃ©cise de l'illumination (+4.1%)
  const correctedIllum = Math.min(100, (moonData.fraction * 104.1)).toFixed(1);

  // 4. DÃ©tection de phase amÃ©liorÃ©e
  const getPhaseName = (phase, illum) => {
    if (illum < 0.5) return { name: "Nouvelle Lune", emoji: "ðŸŒ‘" };
    if (phase < 0.25) return { name: "Premier Croissant", emoji: "ðŸŒ’" };
    if (phase < 0.35) return { name: "Premier Quartier", emoji: "ðŸŒ“" };
    if (phase < 0.45) return { name: "Gibbeuse Croissante", emoji: "ðŸŒ”" };
    if (phase < 0.55) return { name: "Pleine Lune", emoji: "ðŸŒ•" };
    if (phase < 0.65) return { name: "Gibbeuse DÃ©croissante", emoji: "ðŸŒ–" };
    if (phase < 0.75) return { name: "Dernier Quartier", emoji: "ðŸŒ—" };
    return { name: "Dernier Croissant", emoji: "ðŸŒ˜" };
  };

  const currentPhase = getPhaseName(moonData.phase, moonData.fraction);

  // 5. Gestion intelligente des horaires
  const formatEvent = (date) => {
    if (!date) return "-";
    const day = date.getDate() === today.getDate() ? "Aujourd'hui" : 
               date.getDate() === tomorrow.getDate() ? "Demain" : 
               date.toLocaleDateString('fr-FR', { weekday: 'short', day: 'numeric', month: 'short' });
    return `${day} Ã  ${date.toLocaleTimeString('fr-FR', {hour: '2-digit', minute:'2-digit'})}`;
  };

  let nextRise = todayTimes.rise > now ? todayTimes.rise : tomorrowTimes.rise;
  let nextSet = todayTimes.set > now ? todayTimes.set : tomorrowTimes.set;

  // 6. Statut de visibilitÃ©
  const visibility = moonPos.altitude > 0 ? "Visible maintenant" : "Sous l'horizon";

  // 7. Retour des donnÃ©es formatÃ©es
  return `
ðŸŒ™ ${currentPhase.emoji} ${currentPhase.name} (${correctedIllum}%)
${currentPhase.emoji} ${visibility}
â†‘ Lever: ${formatEvent(nextRise)}
â†“ Coucher: ${formatEvent(nextSet)}
  `.trim();
}
