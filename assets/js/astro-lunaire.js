/**
 * ========================================================
 * Codex Mental â€“ intro-astro.js
 * ========================================================
 *
 * ðŸ§­ CONTEXTE
 * Script qui gÃ¨re l'affichage dynamique des messages astronomiques.
 * 
 * âœ¨ FONCTIONNALITÃ‰S
 * - Animation typewriter avec un seul intervalle actif.
 * - Affichage d'un message initial ("Connexion...") puis du message final.
 * - DÃ©tection du thÃ¨me actif (lunaire, solaire, etc.).
 * - DÃ©lai variable selon la prÃ©sence d'une vraie donnÃ©e.
 *
 * ðŸ”§ CONTRAINTES
 * - Ne jamais avoir plusieurs typewriter() simultanÃ©s (Ã©vite les textes corrompus).
 * - Nettoyer les timers et intervalles au changement de thÃ¨me.
 * - Pas de fond autour du bloc par dÃ©faut, juste un texte centrÃ©.
 * - Largeur max et line-height gÃ©rÃ©s par le CSS.
 *
 * ðŸ›  DERNIÃˆRE MISE Ã€ JOUR
 * - Ajout de clearInterval() pour Ã©viter les chevauchements.
 * - Ajout de toLocaleString() si besoin pour afficher la date complÃ¨te.
 * - Gestion propre du curseur clignotant.
 *
 * ðŸš€ REMARQUES
 * - Si des anomalies apparaissent en changeant rapidement de thÃ¨me,
 *   vÃ©rifier que clearTimeout() et clearInterval() sont bien appelÃ©s.
 * - Voir aussi astro-lunaire.js pour la gÃ©nÃ©ration des messages.
 */


import SunCalc from 'https://esm.sh/suncalc';

/**
 * Retourne un texte complet d'infos lunaires
 * @param {Date} date
 * @param {number} lat
 * @param {number} lng
 * @returns {string}
 */
export function getFullMoonInfo(date = new Date(), lat = 48.8566, lng = 2.3522) {
  const now = new Date();
  const moon = SunCalc.getMoonIllumination(date);
  const pos = SunCalc.getMoonPosition(now, lat, lng);
  const illum = (moon.fraction * 100).toFixed(1);
  const phase = moon.phase;

  let label = "Nouvelle lune";
  let emoji = "ðŸŒ‘";

  if (phase < 0.03 || phase > 0.97) {
    label = "Nouvelle lune";
    emoji = "ðŸŒ‘";
  } else if (phase < 0.22) {
    label = "Premier croissant";
    emoji = "ðŸŒ’";
  } else if (phase < 0.28) {
    label = "Premier quartier";
    emoji = "ðŸŒ“";
  } else if (phase < 0.47) {
    label = "Gibbeuse croissante";
    emoji = "ðŸŒ”";
  } else if (phase < 0.53) {
    label = "Pleine lune";
    emoji = "ðŸŒ•";
  } else if (phase < 0.72) {
    label = "Gibbeuse dÃ©croissante";
    emoji = "ðŸŒ–";
  } else if (phase < 0.78) {
    label = "Dernier quartier";
    emoji = "ðŸŒ—";
  } else {
    label = "Dernier croissant";
    emoji = "ðŸŒ˜";
  }

  const optionsDate = {
    weekday: 'short',
    day: '2-digit',
    month: 'long'
  };
  const optionsTime = {
    hour: '2-digit',
    minute: '2-digit'
  };

  const timesToday = SunCalc.getMoonTimes(date, lat, lng);
  const tomorrow = new Date(date);
  tomorrow.setDate(tomorrow.getDate() + 1);
  const timesTomorrow = SunCalc.getMoonTimes(tomorrow, lat, lng);

  const events = [];

  if (timesToday.rise) events.push({ type: 'Lever', time: new Date(timesToday.rise) });
  if (timesToday.set) events.push({ type: 'Coucher', time: new Date(timesToday.set) });
  if (timesTomorrow.rise) events.push({ type: 'Lever', time: new Date(timesTomorrow.rise) });
  if (timesTomorrow.set) events.push({ type: 'Coucher', time: new Date(timesTomorrow.set) });

  const futureEvents = events.filter(e => e.time > now).sort((a, b) => a.time - b.time);

  const nextRise = futureEvents.find(e => e.type === 'Lever');
  const nextSet = futureEvents.find(e => e.type === 'Coucher');

  const riseStr = nextRise
    ? `${nextRise.time.toLocaleDateString('fr-FR', optionsDate)} â€“ ${nextRise.time.toLocaleTimeString('fr-FR', optionsTime)}`
    : "â€”";

  const setStr = nextSet
    ? `${nextSet.time.toLocaleDateString('fr-FR', optionsDate)} â€“ ${nextSet.time.toLocaleTimeString('fr-FR', optionsTime)}`
    : "â€”";

  const status = pos.altitude > 0
    ? `${emoji} La lune est visible au-dessus de lâ€™horizon.`
    : `${emoji} La lune est sous lâ€™horizon.`; // retirÃ© le "actuellement"

  return `ðŸŒ™ La lune est actuellement Ã  ${illum}% (${label})
${status}
${emoji} Prochain lever : ${riseStr}
${emoji} Prochain coucher : ${setStr}`;
}


