// ========================================================
// theme-observer.js ‚Äì Observer les changements de th√®me
// ========================================================

import { lancerIntroAstro, afficherNoteAstro } from '/assets/js/intro-astro.js';
import { initEtoileFilante, stopEtoileFilante } from '/assets/js/etoile-filante.js';

// Variable pour √©viter les d√©clenchements multiples
let currentAlertText = "";
let previousTheme = null;
let astroData = null; // Cache pour les donn√©es astro

// === üéØ Fonction pour charger le widget appropri√© selon le th√®me
function loadThemeWidget(theme, previousTheme) {
  // D'abord, arr√™te les widgets du th√®me pr√©c√©dent
  if (previousTheme) {
    stopPreviousThemeWidget(previousTheme);
  }
  
  // Puis d√©marre le nouveau widget
  switch(theme) {
    case "lunaire":
      console.log("üåô Chargement du widget lunaire...");
      Promise.all([
        import('https://esm.sh/suncalc'),
        import('/assets/js/newmoon.js')
      ])
        .then(([SunCalcModule, moonModule]) => {
          console.log("üåô Moon widget loaded.");
          moonModule.updateNewMoonWidget(SunCalcModule.default);
        })
        .catch(err => console.error("‚ùå √âchec chargement newmoon.js :", err));
      break;
      
    case "solaire":
      console.log("‚òÄÔ∏è Chargement du widget solaire...");
      // Quand tu auras ton module solaire :
      // import('/assets/js/sun-widget.js')
      //   .then(sunModule => {
      //     console.log("‚òÄÔ∏è Sun widget loaded.");
      //     sunModule.updateSunWidget();
      //   })
      //   .catch(err => console.error("‚ùå √âchec chargement sun-widget.js :", err));
      break;
      
    case "stellaire":
      console.log("‚≠ê Activation des √©toiles filantes...");
      initEtoileFilante();
      break;
      
    default:
      console.log("üé® Th√®me par d√©faut, pas de widget sp√©cifique");
  }
}

// === üõë Fonction pour arr√™ter les widgets du th√®me pr√©c√©dent
function stopPreviousThemeWidget(previousTheme) {
  switch(previousTheme) {
    case "stellaire":
      console.log("üõë Arr√™t des √©toiles filantes...");
      stopEtoileFilante();
      break;
      
    case "lunaire":
      // Si tu as besoin d'arr√™ter quelque chose pour le widget lunaire
      console.log("üõë Nettoyage du widget lunaire...");
      break;
      
    case "solaire":
      // Si tu as besoin d'arr√™ter quelque chose pour le widget solaire
      console.log("üõë Nettoyage du widget solaire...");
      break;
  }
}

// === üîÑ Fonction pour d√©tecter le th√®me actuel
function detectCurrentTheme() {
  const body = document.body;
  
  if (body.classList.contains("theme-lunaire")) {
    return "lunaire";
  } else if (body.classList.contains("theme-solaire")) {
    return "solaire";
  } else if (body.classList.contains("theme-stellaire")) {
    return "stellaire";
  }
  
  return null;
}

// === üåó Fonction principale d'initialisation de l'observer
export function initThemeObserver() {
  // Charge les donn√©es astro une seule fois
  if (!astroData) {
    fetch('/arc/events-astro-2025.json')
      .then(res => res.json())
      .then(data => {
        astroData = data;
        console.log("üì° Donn√©es astro charg√©es");
      })
      .catch(err => console.error("‚ùå Erreur chargement donn√©es astro:", err));
  }
  
  const observer = new MutationObserver(() => {
    const currentTheme = detectCurrentTheme();
    const fullClassName = document.body.className;
    
    // Ne d√©clenche l'action que si le th√®me a vraiment chang√©
    if (currentTheme !== previousTheme) {
      console.log(`üîÑ Changement de th√®me: ${previousTheme} ‚Üí ${currentTheme}`);
      
      // R√©initialise l'intro et recharge les donn√©es astro
      currentAlertText = "";
      
      // Recharge les donn√©es astro pour le nouveau th√®me
      if (astroData) {
        afficherNoteAstro(astroData, fullClassName);
      } else {
        // Si les donn√©es ne sont pas encore charg√©es, lance juste l'intro
        lancerIntroAstro(fullClassName);
      }
      
      // Charge le widget appropri√©
      if (currentTheme) {
        loadThemeWidget(currentTheme, previousTheme);
      } else {
        // Si aucun th√®me sp√©cifique, arr√™te quand m√™me l'ancien
        stopPreviousThemeWidget(previousTheme);
      }
      
      previousTheme = currentTheme;
    }
  });
  
  // D√©marre l'observation
  observer.observe(document.body, {
    attributes: true,
    attributeFilter: ["class"]
  });
  
  // Initialise le th√®me actuel
  previousTheme = detectCurrentTheme();
  
  console.log("üéØ Theme observer initialized");
  return observer;
}

// === üîß Fonction utilitaire pour forcer un rechargement du widget
export function reloadCurrentThemeWidget() {
  const currentTheme = detectCurrentTheme();
  const fullClassName = document.body.className;
  
  if (currentTheme) {
    console.log(`üîÑ Rechargement forc√© du widget: ${currentTheme}`);
    loadThemeWidget(currentTheme);
  }
  
  // Recharge aussi les donn√©es astro
  if (astroData) {
    afficherNoteAstro(astroData, fullClassName);
  }
}
