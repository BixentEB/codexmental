// modules.js ‚Äì Chargement centralis√© des widgets du Lab Codex
// üîß Version 2.0 - Combinaison de vos r√®gles et de la solution technique

// üîÅ D√©tection du tableau de bord du labo
if (location.pathname.includes('/lab')) {
  // üé® Gestion du th√®me (votre code original pr√©serv√©)
  document.body.className = 'theme-stellaire lab';
  localStorage.setItem('codex-theme', 'theme-stellaire');

  // üì¶ Ordre de chargement critique avec vos commentaires
  const MODULES = {
    // === üìö BASES DE DONN√âES ===
    databases: [
      '/lab/modules/dashboard/planet-database.js',        // üß† Donn√©es principales
      '/lab/modules/dashboard/moon-database.js',          // üåô Lunes
      '/lab/modules/dashboard/colonization-status.js'     // üèôÔ∏è Statuts
    ],
    
    // === üî≠ VISUALISATION CORE === 
    core: [
      '/lab/modules/dashboard/simul-system.js',           // ‚òÄÔ∏è Radar (charg√© en premier)
      '/lab/modules/dashboard/viewer-planete-3d.js',      // üåç Viewer 3D
      '/lab/modules/dashboard/radar-mini.js'              // üõ∞Ô∏è Mini-radar
    ],
    
    // === üß† UI DYNAMIQUE ===
    ui: [
      '/lab/modules/dashboard/planet-sections.js',        // üìã Sections
      '/lab/modules/dashboard/section-switcher.js',       // üîÅ Switch UI
      '/lab/modules/dashboard/planet-data.js'             // üß© Data manager
    ],
    
    // === üåô MODULES OPTIONNELS ===
    optional: [
      '/lab/modules/simul-moon/simul-moon-canvas.js'      // üåï Lune SVG
    ]
  };

  // ‚öôÔ∏è Chargeur intelligent avec fallback
  async function loadModule(url) {
    try {
      await import(url);
      console.log(`‚úì ${url.split('/').pop()}`);
      return true;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Module non critique manquant: ${url.split('/').pop()}`);
      return false;
    }
  }

  // üöÄ Lancement s√©quentiel contr√¥l√©
  async function init() {
    // 1. Bases de donn√©es (critiques)
    for (const url of MODULES.databases) {
      await loadModule(url);
    }

    // 2. Syst√®me visuel core
    await Promise.all(MODULES.core.map(loadModule));
    
    // 3. UI dynamique
    for (const url of MODULES.ui) {
      await loadModule(url);
    }

    // 4. Optionnels (parall√®le)
    Promise.all(MODULES.optional.map(loadModule))
      .then(() => {
        if (window.launchSimulMoonCanvas) {
          launchSimulMoonCanvas(); // üåï Initialisation lune
        }
      });

    // Activation manuelle du radar
    if (window.SolarSystemRadar) {
      new window.SolarSystemRadar('simul-system'); 
    }

    console.log("‚úÖ Modules charg√©s (ordre contr√¥l√©)");
  }

  // ‚è≥ Lancement avec timeout de s√©curit√©
  setTimeout(init, 100);
}
